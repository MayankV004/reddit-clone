generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String        @unique
  email         String?       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  communities   Community[]   @relation("CommunityCreator")
  subscriptions Subscription[]
  accounts Account[]
  sessions  Session[]
}

model Community {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String?        @unique
  imageUrl    String?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String
  creator     User          @relation("CommunityCreator", fields: [creatorId], references: [id])
  posts       Post[]
  subscribers Subscription[]
}

model Subscription {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  userId      String
  communityId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String?   @unique   
  content     String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  communityId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  postId    String
  parentId  String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  children  Comment[] @relation("CommentToComment")
  votes     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String?
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}